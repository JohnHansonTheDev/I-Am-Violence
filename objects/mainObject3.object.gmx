<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar guystate;
globalvar bloodPlayin;
globalvar collidables, collidableIndex,flashScreen;
globalvar focusedOnObject;
globalvar darkness;
globalvar pause;
globalvar bulletTime;
globalvar fogOn;
fogOn = -1;
bulletTime=0;

pause=0;
darkness=1;//1 for full dark

collidableIndex=0;
porn = 0;
solid=0
instance_create(x,y,flashlightObject);
//instance_create(x,y,flashlightObject2);

guystate="standing";




cursor_sprite = mousecursor;

//set character depth
depth=4;

shadowIDS="";
shadowIndex=0;


collidables="";
collidablesIndex=0;
step=0;
spstep=0.1;
rotateStep=0.1;

shadowcast=0;

 mask_index=guywalk
 
 
 
 bloodPlayin=0;
flashScreen=0;

//spawn effects
instance_create(0,0,scanlinesEffect);

focusedOnObject=0;

//for camera mouse work
last_mouse_x=0;
last_mouse_y=0;

state="walking";
last_image_index=0;

last_second=0;
bullets_fired=0;

name="player";
deadtextangle=0;

/*
i=0
while(i&lt;10000){
i++;
show_debug_message("CREATETETETETETETETETE")
}*/

hasGun=0;

t_back=-1;
grd_back=-1;
last_milli=0;

//sounds
sndb=-1;

last_second=0;
chainsawSoundPlaying=-1
isMowing=-1;


playerSpeed = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  if( t_back)
    background_delete( t_back);
 
    
     if( grd_back)
    background_delete( grd_back);
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sp1 = abs( last_mouse_x - device_mouse_raw_x(0) );
sp2 = abs( last_mouse_y - device_mouse_raw_y(0) );
sp1+=sp2;
if( sp1 &gt; 50 ){
    
    if( instance_number( blur ) &lt; 4 ){
        bl = instance_create(x+irandom(4),y+irandom(4),blur);
        mw = make_colour_rgb(100,100,100);
        
        bl.col = mw;
        bl.alpha = 0.2;
    }
}


if( last_mouse_x!=device_mouse_raw_x(0)){
    last_mouse_x=device_mouse_raw_x(0);
}
if( last_mouse_y!=device_mouse_raw_y(0)){
    last_mouse_y=device_mouse_raw_y(0);
}

//le bullet time
sp=20;
if( bulletTime == 0 ){

      if( room_speed &lt; 60 ){
            sp = (60 - room_speed);
           room_speed+=sp/10;
        
     }
}else{
    if( !audio_is_playing(sndb) ){
        sndb = audio_play_sound(bullettime, 1, false);
        audio_sound_gain( sndb, 0.2, 3000);
    }
     if( room_speed &gt; 1 ){
            sp = (room_speed-1);
           room_speed-=sp/10;
        
     }
     
     if( instance_number( blur ) &lt; 7 ){
        bl = instance_create(x+irandom(4),y+irandom(4),blur);
        mw = make_colour_rgb(250,250,250);
        
        bl.col = mw;
        bl.alpha = 0.2;
    }
}
 for (i = 0; i &lt; instance_number(projectile); i += 1){
         inst = instance_find(projectile,i);
        inst.projectileSpeed = sp;
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_blend_mode( bm_normal );

if( shadowcast&lt;2 || keyboard_check_pressed(ord("E")) ){
    shadowcast++;
    //shadowcaster also adds collidable from layer 2 and 5
     //layer 3 casts shadows only to floor and collidable used for indoor objects
    for (i = 0; i&lt;room_height; i+=16)
    {    
        for (j = 0; j&lt;room_width; j+=16){
            var left, top, width, height, xx, yy;
            tile = tile_layer_find(5, j, i);
             
            if( tile != -1 ){
                
                collidables[collidablesIndex] = tile;
                collidablesIndex++;
                
                left = tile_get_left(tile)
                top = tile_get_top(tile)
                width = tile_get_width(tile)
                height = tile_get_height(tile)
                xx = tile_get_x(tile)
                yy = tile_get_y(tile)
                //tileID = tile_add(tileset,left,top,width+2,height+2,xx-1,yy-1,6)
                //tile_set_alpha(tileID , 1);
                //tile_set_blend(tileID, c_black);
                //tileID = tile_add(tileset,left,top,width,height,xx+4,yy+4,6)
                //tile_set_alpha(tileID , 0.3);
                //tile_set_blend(tileID, c_black);
                //show_debug_message("adding tile");
                shadowIDS[shadowIndex] = -1;//tileID;
                shadowIndex++;
                
                
                //add collidables list for pathfinding
                coll = instance_create( xx, yy, collidable);
               
                collidableIndex++;
            }
        }
    }
    
    /*
    //change the floor  tiles  to above below effect depth
     for (i = 0; i&lt;room_height; i+=16)
    {    
        for (j = 0; j&lt;room_width; j+=16){
           
            tile = tile_layer_find(1000000, j, i);
             //show_debug_message(i);
            if( tile != -1 ){
                //change depth of tile
                tile_set_depth(  tile, 100000);
            }
        }
    }
    */
      //tile_layer_delete(2);
    for (i = 0; i&lt;room_height; i+=16)
    {    
        for (j = 0; j&lt;room_width; j+=16){
            var left, top, width, height, xx, yy;
            tile = tile_layer_find(2, j, i);
            
             //show_debug_message(i);
            if( tile != -1 ){
                //change depth of tile
                //tile_set_depth(  tile, -100001);
            
                collidables[collidablesIndex] = tile;
                collidablesIndex++;
                
                left = tile_get_left(tile)
                top = tile_get_top(tile)
                width = tile_get_width(tile)
                height = tile_get_height(tile)
                xx = tile_get_x(tile)
                yy = tile_get_y(tile)
                tileID = tile_add(tileset,left,top,width+2,height+2,xx-1,yy-1,3)
                tile_set_alpha(tileID , 1);
                tile_set_blend(tileID, c_black);
                tileID = tile_add(tileset,left,top,width,height,xx+4,yy+4,3)
                tile_set_alpha(tileID , 0.5);
                tile_set_blend(tileID, c_black);
                
              
                
                //show_debug_message("adding tile");
                shadowIDS[shadowIndex] = tileID;
                shadowIndex++;
                
                //add collidables list for pathfinding
                coll = instance_create( xx, yy, collidable);
               
                collidableIndex++;
            }
        }
    }
    
    //layer 0 casts shadows bu no collidable used for ceilings
    //still buggy
    for (i = 0; i&lt;room_height; i+=16)
    {    
        for (j = 0; j&lt;room_width; j+=16){
            var left, top, width, height, xx, yy;
            tile = tile_layer_find(0, j, i);
             //show_debug_message(i);
            if( tile != -1 ){
            
                collidables[collidablesIndex] = tile;
                collidablesIndex++;
                
                left = tile_get_left(tile)
                top = tile_get_top(tile)
                width = tile_get_width(tile)
                height = tile_get_height(tile)
                xx = tile_get_x(tile)
                yy = tile_get_y(tile)
                tileID = tile_add(tileset,left,top,width+2,height+2,xx-1,yy-1,3)
                tile_set_alpha(tileID , 1);
                tile_set_blend(tileID, c_black);
                tileID = tile_add(tileset,left,top,width,height,xx+4,yy+4,3)
                tile_set_alpha(tileID , 0.3);
                tile_set_blend(tileID, c_black);
                //show_debug_message("adding tile");
                shadowIDS[shadowIndex] = tileID;
                shadowIndex++;
                
                //add collidables list for pathfinding
                
            }
        }
    }
    
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//view_hview[0]=360//////360 is the zoom out height
//view_wview[0]=360//////360 is the zoom out width

//show_debug_message(x);
//view_angle[0] = 1;//irandom(1);

//tilt camera

    
    /*=
step+=spstep;
if(step&gt;255 || spstep &lt; 0){
    spstep=-spstep;
}
col = make_color_rgb(step,step/2,0);

background_colour= col;
background_showcolour = true;

*/
if(keyboard_check_pressed(vk_shift) ){
        image_speed = 0.1
       playerSpeed=1;
}
if(keyboard_check_released(vk_shift) ){
    image_speed=0.2
    playerSpeed=3;
}


if(state=="dead" || pause==1){
     audio_stop_sound(chainsawSoundPlaying)
    exit;
}



moveMade = -1;
movx=0;
movy=0;


//chainsaw
if mouse_check_button_pressed (mb_left){
    if( state=="chainsaw"){
        state="chainsawattack"
        isMowing=1;
         
        
    }
    if( state=="chainsawattack"){
       
         if( !audio_is_playing(chainsawSoundPlaying) ){
            chainsawSoundPlaying = audio_play_sound(mowing1, 1, true);
            audio_sound_gain( chainsawSoundPlaying, 1, 3000);
        }
    }
    
}
if mouse_check_button_released(mb_left) {
    show_debug_message("I M RPEED");
    if( state=="chainsawattack"){
        state="chainsaw"
        audio_stop_sound(chainsawSoundPlaying)
         audio_play_sound(mowing2, 1, false);
    }
    isMowing=0;
}

if( state="chainsawattack" &amp;&amp; isMowing==1 ){
     movx =irandom(4)-2
     movy =irandom(4)-2
    effect_create_below(ef_smoke, x, y, 0.1, c_black);
    applyChainsawDamage();
}

//pushback gun
if( state=="pistol" &amp;&amp; mouse_check_button_pressed(mb_left) ){
   
    alertGuardsDistance(300);
    
    angle = point_direction(x, y, mouse_x, mouse_y);
    
    dir[0] = mouse_x - x;
    dir[1] = mouse_y - y;
    dist = point_distance(dir[0], dir[1], 0, 0 );
    tmp[0] = 0;
    tmp[1] = 0;
    if( dist!= 0){
        tmp[0] = dir[0]/dist;
        tmp[1] = dir[1]/dist;
    }
    
    proj = instance_create( x+tmp[0]*10, y+tmp[1]*10, projectile);
    proj.destination[0] = tmp[0];
    proj.destination[1] = tmp[1];
    proj.owner = "player";
    proj.projectileSpeed = 20;
    proj.image_angle = angle;
    
    movx+=( -proj.destination[0] * 4);
    movy+=( -proj.destination[1] * 4);
}

if( state=="knife" &amp;&amp; mouse_check_button_pressed(mb_left) ){
   state="knifeattack";
   image_speed = 1;
   audio_play_sound(knifecut, 1, false);
}



            
view_angle[0]+=rotateStep;
if(view_angle[0]&gt;3){
    rotateStep=-0.01;
}
if(view_angle[0]&lt;-3){
    rotateStep=0.01;
}





//flicker shadows   
if(0){//shadowIndex&gt;0){
    for( i = 0; i &lt;shadowIndex; i++){
        if( tile_exists( shadowIDS[i] ) )
        tile_set_scale(shadowIDS[i], 1+ (irandom(5)/100) ,1+(irandom(5)/100) );
    }
}


//show_debug_message("current second");
//how_debug_message(current_second);

 
if keyboard_check(ord('F')){
    if( useflashlight == 0 ){
        useflashlight = 1;
    }else{
        useflashlight = 0;
    }
}

if keyboard_check(ord('K')){
    if( fogOn == 0 ){
        fogOn = 1;
    }else{
        fogOn = 0;
    }
}


if keyboard_check(ord('R')){
//

room_instance_clear(2);
room_restart();
//room_goto_previous();
//room_goto(room3);
}

if keyboard_check_released(ord('N')){
    go_to_next_room();
}


if keyboard_check(ord('A')){
movx = -playerSpeed;
guystate="walking";
moveMade=1;
}
if keyboard_check(ord('D')){
movx = playerSpeed;
guystate="walking";
moveMade=1;
}
if keyboard_check(ord('W')){
movy = -playerSpeed;
guystate="walking";
moveMade=1;
}
if keyboard_check(ord('S')){
movy = playerSpeed;
guystate="walking";
moveMade=1;
}

if(moveMade==1){}else{
guystate="standing";
}

if(position_meeting( x + movx, y,collidable) ){
    show_debug_message("collision");
    movx=0;
}else{

    if( focusedOnObject==0 ){
        x = x + movx;
        //view_angle[0] = 1
     
    }
}

if(position_meeting( x, y + movy, collidable) ){
    show_debug_message("collision");
    movy=0;
}else{
     if( focusedOnObject==0 ){
        y = y + movy;
      
    }
    
}


if( ( movx != 0 || movy != 0) ){

 //show_debug_message( instance_number( bloom ) );
 if( playerSpeed==3){
    alertGuardsDistance(150);
    
    
     if( abs( last_milli - current_time ) &gt;300 ){
        var snd = audio_play_sound(footstep, 1, false);
        audio_sound_gain(snd, 0.2, false);
        
        last_milli=current_time
        }
 }
}
/*
if(tile_layer_find(2, x + movx, y) ||
tile_layer_find(6, x + movx, y)){
    //show_debug_message("collision");
    movx=0;
}else{

    if( focusedOnObject==0 ){
        x = x + movx;
        //view_angle[0] = 1
     
    }
}

if(tile_layer_find(2, x, y + movy)||
tile_layer_find(6, x, y + movy)){
    //show_debug_message("collision");
    movy=0;
}else{
     if( focusedOnObject==0 ){
        y = y + movy;
      
    }
    
}
*/


if mouse_check_button_pressed(mb_left)
{
   //instance_create( mouse_x, mouse_y, lightmap );
   //var d1 = instance_create( mouse_x, mouse_y, dialog );
   //d1.text = "this is a test";
   //instance_create(mouse_x, mouse_y,soldier);
   //effect_create_above(ef_explosion, mouse_x, mouse_y, 0.05, c_red);
}



if mouse_check_button_pressed(mb_right)
{
   var c1 = instance_create( mouse_x, mouse_y, lightmap );
   c1.color =  make_color_rgb(irandom(55)+200, 145, 255);
   if( playerSpeed==3){
    AlertGuards();
   }
   
}




 
//camera movement enchanced
//still buggy
//show_debug_message(mouse_x);
//show_debug_message(mouse_y);

sound_global_volume(-1000);
sound_stop_all();

spx =  device_mouse_raw_x(0) - last_mouse_x ;
spy =  device_mouse_raw_y(0) - last_mouse_y  ;


mx = abs(mouse_x - x);
my = abs(mouse_y - y);

vx = x - view_xview[0];
vy = y - view_yview[0];

t1 = x &gt; 100 &amp;&amp; x &lt; 180;
t2 = y &gt; 100 &amp;&amp; y &lt; 160;
t3 = mouse_x &gt; 90 &amp;&amp; mouse_x &lt; 150;
t4 = mouse_y &gt; 100 &amp;&amp; mouse_y &lt; 160;
t5 = t1 &amp;&amp; t2 &amp;&amp; t3 &amp;&amp; t4;

if(  (spx!=0 || spy!=0)&amp;&amp; focusedOnObject==0  ){
    
    //show_debug_message("movement:");
    //show_debug_message(spx);
    //show_debug_message(spy);
    spanPlx = spx;
    spanPly = spy;
    
    view_xview[0]+=(spx/4);
    view_yview[0]+=(spy/4);
}

if(focusedOnObject==0 &amp;&amp; ( movx!=0 || movy!=0 ) ){
    view_xview[0]+=movx;
    view_yview[0]+=movy;
}


//bullet time
if mouse_check_button(mb_right){
   
   bulletTime =1 ;
}
if mouse_check_button_released(mb_right)
{
    bulletTime=0;  
  
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="pickableChainsaw">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inst = other.id
with(inst){
    hasChainsaw=1;
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//exit
  if(state!="dead"){
  
    inst = other.id;
    if( inst.owner=="soldier"){
 
        var bl = instance_create( mainObject3.x, mainObject3.y, blood);
        bl.size = 1 + irandom(100)/100;
        
        //var pd = point_direction(x,y, mainObject3.x,mainObject3.y);
        
        bl.pdx = inst.destination[0];
        bl.pdy = inst.destination[0];
        
       state="dead";
        instance_create(x,y,cameraShake);
        
        }
        
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> 
   

if( state=="pistol" &amp;&amp; keyboard_check(17) ){
   instance_create(x,y,cameraShake);
   
    angle = point_direction(x, y, mouse_x, mouse_y);
    
    dir[0] = mouse_x - x;
    dir[1] = mouse_y - y;
    dist = point_distance(dir[0], dir[1], 0, 0 );
    tmp[0]=0;
    tmp[1]=0;
    if( dist!= 0){
    tmp[0] = dir[0]/dist;
    tmp[1] = dir[1]/dist;
    }
    
    
    proj = instance_create( x+(tmp[0]*5), y+(tmp[1]*5), projectile);
    proj.destination[0] = tmp[0];
    proj.destination[1] = tmp[1];
    proj.owner = "player";
    proj.projectileSpeed = 20;
    proj.image_angle = angle;
    
    movx+=( -proj.destination[0] * 4);
    movy+=( -proj.destination[1] * 4);
    
    bullets_fired++;
    show_debug_overlay(true);
    show_debug_message(bullets_fired);
}

if( keyboard_check_pressed(ord("R")) ){

    show_debug_message("RESTARTING");
   restart_room();
}


if keyboard_check(ord('Q')){
clearResources(true);
game_end();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//if( mouse_wheel_up() ){

    if(state=="walking"){
        audio_play_sound(knife, 1, false);
    
        state="knife";
        cursor_sprite = cursoraim;
    }else if(state=="knife"){
        state = "pistol";
        cursor_sprite = cursoraim;
          audio_play_sound(cock, 1, false);
    }else if(state=="pistol"){
        state = "chainsaw";
        cursor_sprite = cursoraim;
          audio_play_sound(mowing2, 1, false);
    }else if( state=="chainsaw"){
        state="walking"
        
        cursor_sprite = mousecursor;
    }else{
        state="walking";
        cursor_sprite = mousecursor;
    }
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//cool post draw effect like old tv
//nice underground blur effect

if ( ( current_time-last_second) &gt; 60) {
    last_second = current_time
    if (t_back) {
        background_delete(t_back);
        background_delete(grd_back);

    }
    grd_back = background_create_gradient(388, 288, c_red, c_blue, 0);

    t_back = background_create_from_surface(application_surface, 0, 0, 388, 288, 9, 0)
    background_assign(0, t_back);
    //background_assign( 0, t_back);
    background_visible[0] = true

    background_index[0] = t_back;
    background_alpha[0] = 0.7
    background_x[0] = view_xview[0];
    background_y[0] = view_yview[0];

    background_assign(1, grd_back);
    //background_assign( 0, t_back);
    background_visible[1] = true

    background_index[1] = grd_back;
    background_alpha[1] = 0.1
    background_x[1] = view_xview[0];
    background_y[1] = view_yview[0];

}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (  fogOn==1 ){
    col = make_colour_rgb(irandom(255),irandom(255)/2,0); 
    //for( i = 0; i &lt;2;i++){
        effect_create_below(ef_cloud, mainObject3.x+irandom(500)-250,mainObject3.y+irandom(500)-250, choose(0, 1, 2), col);
             //effect_create_above(ef_cloud, mainObject3.x+irandom(500)-250, mainObject3.y+irandom(500)-250, choose(0, 1, 2), c_black);
   
    //}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( state=="dead" ){

    draw_sprite_ext(deadSprite, 0,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
        draw_sprite_ext(deadSprite, 0,x, y, 1, 1, image_angle, c_white, 1);
     
    exit;
}


texture_set_interpolation(0);
//draw character
//get mouse angle
image_angle = point_direction(x, y, mouse_x, mouse_y);
draw_set_alpha(1);

//draw legs first
if( guystate!="standing" ){
    draw_sprite_ext(legsSprite, image_index,x+1, y+1, 0.7, 0.7, image_angle, c_black, 0.7);
        draw_sprite_ext(legsSprite, image_index,x, y, 0.6, 0.6, image_angle, c_white, 1);
}else{
     
}

if(guystate=="walking" &amp;&amp; state=="walking"){
image_speed=0.2;
draw_sprite_ext(guywalk, image_index,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
  draw_sprite_ext(guywalk, image_index,x, y, 1, 1, image_angle, c_white, 1);
  
}else if(state=="pistol"){
    image_speed=0.2;
    if( guystate=="standing"){
        draw_sprite_ext(guygun, 0,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
        draw_sprite_ext(guygun, 0,x, y, 1, 1, image_angle, c_white, 1);
   
    }else{
        draw_sprite_ext(guygun, image_index,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
        draw_sprite_ext(guygun, image_index,x, y, 1, 1, image_angle, c_white, 1);
         
    }
    //draw mouse cursor
    for( i = 0; i &lt; 5;i++){
        draw_sprite_ext(cursoraim, image_index, mouse_x + irandom(2), mouse_y + irandom(2), 1, 1, image_angle, c_white, 0.3);
    }
}else if(state=="chainsaw" || state=="chainsawattack"){

    //if( guystate=="standing"){
      //  draw_sprite_ext(guychainsaw, 0,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
        //draw_sprite_ext(guychainsaw, 0,x, y, 1, 1, image_angle, c_white, 1);
   
    //}else{
        draw_sprite_ext(guychainsaw, image_index,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
        draw_sprite_ext(guychainsaw, image_index,x, y, 1, 1, image_angle, c_white, 1);
        image_speed = 0.2;
         if( state=="chainsawattack")
            image_speed = 1
    //}
    //draw mouse cursor
    for( i = 0; i &lt; 5;i++){
        draw_sprite_ext(cursoraim, image_index, mouse_x + irandom(2), mouse_y + irandom(2), 1, 1, image_angle, c_white, 0.3);
    }
}else if(state=="knife"){
    image_speed=0.2;
    if( guystate=="standing"){
        draw_sprite_ext(guyknife, 0,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
        draw_sprite_ext(guyknife, 0,x, y, 1, 1, image_angle, c_white, 1);
   
    }else{
        draw_sprite_ext(guyknife, image_index,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
        draw_sprite_ext(guyknife, image_index,x, y, 1, 1, image_angle, c_white, 1);
         
    }
    //draw mouse cursor
    for( i = 0; i &lt; 5;i++){
        draw_sprite_ext(cursoraim, image_index, mouse_x + irandom(2), mouse_y + irandom(2), 1, 1, image_angle, c_white, 0.3);
    }
}else if(state=="knifeattack"){
//show_debug_message(image_index);
    
        draw_sprite_ext(guyknifeattack, image_index,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
        draw_sprite_ext(guyknifeattack, image_index,x, y, 1, 1, image_angle, c_white, 1);
        if(image_index&gt; 8 + last_image_index){
            state="knife";
            last_image_index= image_index;
        }
        for( i = 0; i &lt; 5;i++){
            draw_sprite_ext(cursoraim, image_index, mouse_x + irandom(2), mouse_y + irandom(2), 1, 1, image_angle, c_white, 0.3);
        }
}else{
draw_sprite_ext(guywalk, 0,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
  draw_sprite_ext(guywalk, 0,x, y, 1, 1, image_angle, c_white, 1);
  
}


draw_set_alpha(1);
//show_debug_message(image_index);
//show_debug_message(image_speed);

//draw effects
 draw_set_alpha(1);
 
 
  //draw_set_alpha(0);
   // draw_rectangle_color(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], c_black, c_black, c_black, c_black, false);
    //draw_set_alpha(1);
   
 if( flashScreen&gt;0){
     draw_set_alpha(0.4);
     //flash
    //subliminal message
    if(porn==1 || irandom(64)==64){
        draw_set_alpha(1);
        //draw_sprite_ext(pornSprite, 0 , view_xview[0], view_yview[0], 1, 1, 0, c_white, flashScreen);
        draw_sprite_ext(eagle, 0 , view_xview[0], view_yview[0], 1, 1, 0, c_white, flashScreen);
        
        porn=1;
     }else{
        draw_rectangle_color(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], c_white, c_white, c_white, c_white, false);
    
     }
     
    draw_set_alpha(1);
    flashScreen-=0.1;
    //show_debug_message("hey from flashscreen");
    //show_debug_message(flashScreen);
 }else{
    porn=0;
 }
 
 
//bug effect
//draw_sprite_ext(bug, image_index , x, y, 1, 1, 0, c_white, true);
//show_debug_message(image_index);
//performance
if( 0 &amp;&amp; useflashlight==1){
    for( i = 0; i &lt; 100;i++){
        draw_sprite_ext(bug, image_index , x+irandom(500)-250, y+irandom(500)-250, 1, 1, 0, 
        c_white, 0.1);
    }
}
 /*
//draw scanline
draw_set_color( c_black );
draw_set_alpha( random_range(1,3) / 63.5 );
for(i=0;i&lt;tot ;i++)
{
 draw_line_width(0, starty + ( i*inc ), room_width, starty + (i*inc) , 2);
}
starty=starty+0.1;
if(starty&gt;inc)
 starty=0;
 */
 
 //cool looking screen letters with distortion in post event
 if( state=="dead"){
 timeString = "YOUR DEAD X"
     
 shader_set(discolor);
          
        
            draw_set_alpha(1);
        draw_set_color(c_blue);
        d3d_transform_set_rotation_z(step/100);
         draw_text_transformed( x,  y , timeString, 2, 2, 1);
       draw_set_color(c_green);
         
        draw_text_transformed( x,  y , timeString, 2, 2, 1);
        draw_set_color(c_white);
         
       draw_text_transformed( x,  y , timeString, 2, 2, 1);
       draw_set_font(font1small);
 shader_reset();
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

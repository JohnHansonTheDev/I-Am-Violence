<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>solid=1
mask_index=colSprite
life=10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="fatman">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exit
//check if object is stuck and push it back
cid = other.id
span=1;
for(span=0;span&lt;32;span++){
if(!place_meeting(cid.x+span,cid.y,collidable))
{ cid.x+=span;exit}
if(!place_meeting(cid.x+span,cid.y+span,collidable))
{ cid.x+=span;cid.y+=span;exit}
if(!place_meeting(cid.x,cid.y+span,collidable))
{ cid.y+=span;exit}
if(!place_meeting(cid.x-span,cid.y,collidable))
{  cid.x-=span;;exit}
if(!place_meeting(cid.x-span,cid.y-span,collidable))
{ cid.x-=span;cid.y-=span;exit}
if(!place_meeting(cid.x,cid.y-span,collidable))
{ cid.y-=span;exit}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="soldier2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exit
//check if object is stuck and push it back
cid = other.id
span=1;
if(!place_meeting(cid.x+span,cid.y,collidable))
{ cid.x+=span;exit}
if(!place_meeting(cid.x+span,cid.y+span,collidable))
{ cid.x+=span;cid.y+=span;exit}
if(!place_meeting(cid.x,cid.y+span,collidable))
{ cid.y+=span;exit}
if(!place_meeting(cid.x-span,cid.y,collidable))
{  cid.x-=span;;exit}
if(!place_meeting(cid.x-span,cid.y-span,collidable))
{ cid.x-=span;cid.y-=span;exit}
if(!place_meeting(cid.x,cid.y-span,collidable))
{ cid.y-=span;exit}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="soldier">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exit
//check if object is stuck and push it back
cid = other.id
span=1;
for(span=0;span&lt;32;span++){
if(!place_meeting(cid.x+span,cid.y,collidable))
{ cid.x+=span;exit}
if(!place_meeting(cid.x+span,cid.y+span,collidable))
{ cid.x+=span;cid.y+=span;exit}
if(!place_meeting(cid.x,cid.y+span,collidable))
{ cid.y+=span;exit}
if(!place_meeting(cid.x-span,cid.y,collidable))
{  cid.x-=span;;exit}
if(!place_meeting(cid.x-span,cid.y-span,collidable))
{ cid.x-=span;cid.y-=span;exit}
if(!place_meeting(cid.x,cid.y-span,collidable))
{ cid.y-=span;exit}
}

with(cid){
x=xstart
y=ystart
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

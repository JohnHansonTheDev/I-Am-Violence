<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar useflashlight;
useflashlight=0;

surf=surface_create(2640,2480);
surface_set_target(surf);
draw_clear(c_black);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(useflashlight==0)exit
if(useflashlight==2){
    useflashlight=1;exit
}

depth=4;
 draw_set_alpha(1);
surface_set_target(surf);


draw_clear(c_black);
draw_set_blend_mode(bm_subtract);

pdir = point_direction(mainObject3.x,mainObject3.y,mouse_x,mouse_y)

//shadow caster works
v[0] =  mouse_x - mainObject3.x ;
v[1] = mouse_y - mainObject3.y;
dist = point_distance(v[0], v[1], 0, 0 );

if( dist != 0){
d[0] = v[0]/dist;
d[1] = v[1]/dist;
}

dist+=30;
//flashlight position end
flpoint[0] = mainObject3.x + (d[0]*dist);
flpoint[1] = mainObject3.y + (d[1]*dist);

//find perpendiculars
//v = P2 - P1
//P3 = (-v.y, v.x) / Sqrt(v.x^2 + v.y^2) * h

h=50;
sq=sqrt( (v[0]*v[0]) + (v[1]*v[1]) )
p3[0] = (-v[1]/sq*h) + flpoint[0];
p3[1] = (v[0]/sq*h) + flpoint[1];

d3[0] = (-v[1]/sq);
d3[1] = ( v[0]/sq);
//P4 = (-v.y, v.x) / Sqrt(v.x^2 + v.y^2) * -h
h=-50;
p4[0] = (-v[1]/sq*h) + flpoint[0];
p4[1] = (v[0]/sq*h) + flpoint[1];


draw_set_alpha(0.9);
draw_rectangle(flpoint[0],flpoint[1],flpoint[0]+16,flpoint[1]+16,true)
draw_rectangle(p3[0],p3[1],p3[0]+16,p3[1]+16,true)
draw_rectangle(p4[0],p4[1],p4[0]+16,p4[1]+16,true)

draw_set_color(c_green);
draw_primitive_begin(pr_trianglefan);
draw_vertex(mainObject3.x, mainObject3.y);
            
while( abs( p4[0] - p3[0] )!= 0 &amp;&amp;
    abs( p4[1] - p3[1] )!= 0 ){
    p4[0]+=d3[0]*4;
    p4[1]+=d3[1]*4;    
    
    c = collision_line_first( mainObject3.x, mainObject3.y, p4[0], p4[1],collidable, true, true);
    if(c){  
        //create rectangle
        rx=c.x;
        ry=c.y;
        rx1=c.x+16;
        ry1=c.y+16;
        //found new d
        v[0] = p4[0] - mainObject3.x;
        v[1] = p4[1] -  mainObject3.y;
        dist = point_distance(v[0], v[1], 0, 0 );
        if( dist != 0){
            d[0] = v[0]/dist;
            d[1] = v[1]/dist;
        }
        
        tp[0] = mainObject3.x;
        tp[1] = mainObject3.y;
        
        cnt=0;
        while( cnt &lt; 300 &amp;&amp; (d[0]!=0 || d[1]!=0) &amp;&amp; !point_in_rectangle(tp[0], tp[1], rx, ry, rx1, ry1) ){
            tp[0]+=(d[0]);
            tp[1]+=(d[1]);
            cnt++;
        }
        //draw_vertex( mainObject3.x + ( px*d[0] ), mainObject3.y + (py*d[1]) );
        if( cnt &lt; 300 )
        draw_vertex( tp[0], tp[1])
        
         //draw_vertex( c.x, c.y);
        //draw_line(mainObject3.x, mainObject3.y, tp[0], tp[1]);
    }else{
        draw_vertex( p4[0], p4[1]);
    }
}

draw_primitive_end();
    

draw_set_alpha(darkness);  
surface_reset_target();

draw_set_blend_mode(bm_normal);

draw_surface( surf, 0, 0);

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

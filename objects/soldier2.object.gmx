<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth=5;
lastx=x;
lasty=y;

texts[1]="What do you want? 
";
texts[0]="u 'avin a giggle m8?
";
texts[2]="welkomen 
";
 texts[3]="MOVE IT!
 ";
 texts[4]="GET OUTTA MY FACE!
 ";
 texts[5]="I'm going to kill you
 "
diag = instance_create( x, y, dialog);
diag.text="";
 
 last_image_index=image_index
 
 state="standing";
 
 mask_index=guywalk
 solid=1;
 light =0;
 findpath=0;
 
 step=-1;
 
 
 mouseover=0;
 
 fired=0;
 last_second=0;
 isFiring=0;
 
 name="soldier";
 
 reaction=0;
reactionTop = 0;

path=-1;

hasGun=0;

lastTimeSeen=0;
last_milli=0;
last_angle=0;

soldierSpeed = 3
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>119</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_path</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>8</kind>
            <path>-1</path>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message("trying to end");
path_end()

if(path)
path_delete(path)

//show_debug_message("ended")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*
if( floor(image_index)!=last_image_index ){
    diag.text = texts[irandom(5)];
    diag.textIndex = 0;
    last_image_index=floor(image_index);
}


if(irandom(100)==100){
    instance_create( x + irandom(10), y + irandom(10),blood);
    
}
*/

//show_debug_message(path_speed);
//show_debug_message(state);

if( state == "dead" ){
    mask_index=-1;
    solid=0;
    exit;
}



if( mainObject3.state=="dead"){
    state="standing";
    mask_index=-1;
    solid=0;
    exit;
}
//test if enemy can see us then shoot at us
dist_to_player = distance_to_object(mainObject3)
dir[0] = cos(image_angle/57);
dir[1] = -sin(image_angle/57);
cx = x + dir[0]*2;
cy = y + dir[1]*2;

can_see=false
var inst = instance_nearest(x, y, mainObject3);
if instance_exists(inst)
   {
   var x1 = x + lengthdir_x(250, image_angle - 45);
   var y1 = y + lengthdir_y(250, image_angle - 45);
   var x2 = x + lengthdir_x(250, image_angle + 45);
   var y2 = y + lengthdir_y(250, image_angle + 45);
   if point_in_triangle(inst.x, inst.y, x, y, x1, y1, x2, y2)
      {
      can_see = true;
      }
   }
//colCanSeePlay = collision_line_first( cx, cy, cx+(200*dir[0]), cy+(200*dir[1]),mainObject3, true, true)
col = collision_line_first( x, y, inst.x, inst.y,collidable, true, true)


if( can_see  &amp;&amp; !col){
//show_debug_message("ISEEHIM:" + string(can_see) +":"+string(col));
    state="find";
    //image_angle = mainObject3.image_angle;
    //direction = mainObject3.direction;
    reactionTop = irandom(20);
    reaction = 0;
    lastTimeSeen = 0;
}else{
    isFiring=0;
    reaction = 0;
    reactionTop = 30;
    lastTimeSeen++;
}
 


if( state == "find" &amp;&amp; !col ){

    pdirAngle = point_direction( x, y, mainObject3.x, mainObject3.y);
    image_angle = pdirAngle;
        
    dir[0] = cos(image_angle/57);
    dir[1] = -sin(image_angle/57);
     
       if(!position_meeting( x + (dir[0]*2), y,collidable) ){
        x += (dir[0]*2) ;
    }

if(!position_meeting( x,  y + (dir[1]*2), collidable) ){
         y += (dir[1]*2) ;
    }
    
     //recoil
    
        reaction++;
    
   
   //for( i = 0; i &lt; 3; i++)
   if( hasGun == 1 ){
   //check if we have a clear target and fire
   //might kill one of the other enemies but who cares it's funny
    col = collision_line_first( cx, cy, cx+(dist_to_player*dir[0]), cy+(dist_to_player*dir[1]),soldier, true, true)
    
    
    //if( !col &amp;&amp; reaction &gt; reactionTop ){
    if( reaction &gt; reactionTop ){
        instance_create(x,y,cameraShake);
        proj = instance_create( x+dir[0]*10, y+dir[1]*10, projectile);
        proj.owner = "soldier";
        proj.destination[0]=dir[0]+irandom(10)/100;
        proj.destination[1]=dir[1]+irandom(10)/100;;
        proj.projectileSpeed = 30;
        proj.image_angle = image_angle;
        reaction = 0;
        reactionTop = 0;
    }
    
        isFiring=1;
    }
}else if( state == "find"  ){//we're searching for him
    mask_index=colSpriteSmall;
    lTSteps = 5*60;//60 for one second
   // show_debug_message("lat time seen:" + string(lastTimeSeen));
    if( lastTimeSeen &lt; lTSteps &amp;&amp; ( step==-1 || (step &gt; 20 &amp;&amp; isFiring!=1) ) ){
        if( instance_exists(mainObject3) )
       {
            
           path = path_add();
            //mp_potential_path(path, mainObject3.x, mainObject3.y, 1, 3, true);
            var succ = mp_potential_path_object(path, mainObject3.x, mainObject3.y, soldierSpeed, 1, collidable);
           
            path_start(path, 2, 0, 0);
            if( findpath!=0 ){
                path_delete(findpath);
            }
            findpath = path;
            //show_debug_message("path number:");
            //show_debug_message(path);
            show_debug_message(succ);
       }
       step=0;
    }
    step++;
    if( lastTimeSeen &gt; lTSteps ){
        state = "returning";
    }
}

//returns to initial position if player lost
if( state=="returning" ){
            path = path_add();
            //mp_potential_path(path, mainObject3.x, mainObject3.y, 1, 3, true);
            var succ = mp_potential_path_object(path, xstart, ystart, 1, 1, collidable);
           //show_debug_message("returning to:" + string(xstart) + ":" + string(ystart));
           //show_debug_message("from:" + string(x) + ":" + string(y));
           
            path_start(path, 2, 0, 0);
            if( findpath!=0 ){
                path_delete(findpath);
            }
            findpath = path;
            //show_debug_message("path number:");
            //show_debug_message(path);
            show_debug_message(succ);
            
            if( xstart == x &amp;&amp; ystart == y ){
                state = "standing";
                path_speed=0;
                mask_index=guywalk;
            }
}
//if(path_speed &gt; 0){
    //state="walking";
//}else{
 
//}


if( light!=0){
light.x = x;
light.y = y;
}   

//inflict damage knife
 if( state=="find" &amp;&amp; abs( mainObject3.x - x ) &lt; 20 &amp;&amp; abs( mainObject3.y- y ) &lt; 20 ){
       
       
        /*here should come knife punch whatever damage
        proj = instance_create( x+dir[0]*10, y+dir[1]*10, projectile);
        proj.owner = "soldier";
        proj.destination[0]=dir[0]+irandom(10)/100;
        proj.destination[1]=dir[1]+irandom(10)/100;;
        proj.projectileSpeed = 30;
        proj.image_angle = image_angle;
        reaction = 0;
        reactionTop = 30;
        */
        
              
 }
 
 
 
 
 if( state != "dead" &amp;&amp; diag.answerClicked=="FIGHT GUARD!" ){
        state="find";
        //make hitbox  smaller to move around easier
        mask_index=colSpriteSmall
        if( light == 0 ){
            light=instance_create(x,y,lightmap);
            light.color = c_red;
        }
 } 
 
 
if mouse_check_button_pressed(mb_left)
{
   if(  mainObject3.state=="walking" &amp;&amp; focusedOnObject==0 &amp;&amp; state!="dead" &amp;&amp; state!="find" &amp;&amp; abs( mouse_x - x ) &lt; 20 &amp;&amp; abs( mouse_y - y ) &lt; 20 ){
    diag.showText = 1;   
    diag.text = texts[0]
    diag.textIndex = 0;
     state="standing";
     focusedOnObject=1;
     audio_play_sound(growl,1,false);
     /*
     if( irandom(10) == 10 ){
        diag.text="The hangman is not going to kill you
        , I AM !,
         come here scumbag! ";
        state="find";
        //make hitbox  smaller to move around easier
        mask_index=colSpriteSmall
        if( light == 0 ){
            light=instance_create(x,y,lightmap);
            light.color = c_red;
        }
     }
     */
    
   }
  
}

if mouse_check_button_pressed(mb_right)
{
 
   //state="find";
   //mask_index=colSpriteSmall
}


//if not following a path 
//check if rotate around self
if( path_speed!=0){
    image_angle = point_direction(lastx, lasty, x ,y);
}


if( state=="standing"){
    if( current_second-last_second!=0){
        if( irandom(4)&gt;3){
            if( irandom(2) == 1 ){
                direction+=60;
                image_angle+=60;
            }else{
                direction-=60;
                image_angle-=60;
            
            }
        }
    }
}

if( x!=lastx || y!=lasty){
    if( abs( last_milli - current_time ) &gt;300 ){
    var snd = audio_play_sound(footstep, 1, false);
    audio_sound_gain(snd, 0.2, false);
    
    last_milli=current_time
    }
}

if( x!=lastx ){
    lastx=x;
}
if(y!=lasty){
    lasty=y;
}



diag.x = x;
diag.y = y;




//spinning image created by path searching
last_second =current_second; 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
  if(state!="dead"){
  
    inst = other.id;
    if( inst.owner=="player"){
 show_debug_message("hit");
   var bl = instance_create( x, y, blood);
            bl.size = 1 + irandom(100)/100;
            
            //var pd = point_direction(x,y, mainObject3.x,mainObject3.y);
            
            bl.pdx = 0;
            bl.pdy = 0;
            state = "dead";  
             if(irandom(10)&lt;10){
                s = audio_play_sound(dead,0.01,false);
               audio_sound_gain( s, 0.2, 0);

            }else{   
               s=  audio_play_sound(taunt,0.01,false); 
                                audio_sound_gain( s, 0.2, 0);
  
            }
        
        with(inst){
            instance_destroy();
        }
    
       
    }
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouseover=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouseover=1;

show_debug_message("mousedover");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw shadow first

//draw_sprite_ext(guywalk, image_index,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
//draw_sprite_ext(guywalk, image_index,x, y, 1, 1, image_angle, c_white, 1);
//image_speed = 0.01;
//draw legs first
if( state == "dead"){
depth=7;
draw_sprite_ext(guydead2, 0,x+1, y+1, 1, 1, image_angle, c_black, 0.7);
  draw_sprite_ext(guydead2, 0,x, y, 1, 1, image_angle, c_white, 1);
exit;
}

if( mouseover==0){
shadowcolor = c_black;
}else{
shadowcolor = c_red;
for(i =0 ; i &lt;10;i++){
    draw_set_alpha(irandom(4)/10);
   draw_circle( x+irandom(5)-2, y+irandom(5)-2, 16+irandom(1),false);
   }
}
if( state!="standing" &amp;&amp; state!="dead" ){
    draw_sprite_ext(legsSprite, image_index,x+1, y+1, 0.7, 0.7, image_angle, shadowcolor, 0.7);
        draw_sprite_ext(legsSprite, image_index,x, y, 0.6, 0.6, image_angle, c_white, 1);
}else{
     
}

if( isFiring==1 || hasGun==1){

    if( state=="standing"){
        draw_sprite_ext(guygun2, 0,x+1, y+1, 1, 1, image_angle, shadowcolor, 0.7);
        draw_sprite_ext(guygun2, 0,x, y, 1, 1, image_angle, c_white, 1);
        image_speed = 0.02;
    }else if(state=="find" || state=="returning"){
        draw_sprite_ext(guygun2, image_index,x+1, y+1, 1, 1, image_angle, shadowcolor, 0.7);
        draw_sprite_ext(guygun2, image_index,x, y, 1, 1, image_angle, c_white, 1);
         image_speed = 0.2; 
    }
}else{
if(state=="walking" || state=="find" || state=="returning"){
draw_sprite_ext(guywalk2, image_index,x+1, y+1, 1, 1, image_angle, shadowcolor, 0.7);
  draw_sprite_ext(guywalk2, image_index,x, y, 1, 1, image_angle, c_white, 1);
  image_speed = 0.2;
}else{
draw_sprite_ext(guywalk2, image_index,x+1, y+1, 1, 1, image_angle, shadowcolor, 0.7);
  draw_sprite_ext(guywalk2, image_index,x, y, 1, 1, image_angle, c_white, 1);
  image_speed = 0.02;
}
}

//draw_line(cx, cy, cx+(200*dir[0]), cy+(200*dir[1]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

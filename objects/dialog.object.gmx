<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth=-1

text="";

textIndex=0;
showText = 0;

okTextClicked=0;
cancelTextClicked=0;

noflines=0;
pages=0;
currentPage=0;

lines[0]="test";
for( i =0; i&lt; 100;i++){
lines[i]="";
}

textIndexes[0]="";
for( i =0; i&lt; 100;i++){
textIndexes[i]="";
}

okayAnswer="ok";
cancelAnswer="";
answerClicked="";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> if mouse_check_button_pressed(mb_left) {
     if (showText == 1) {
        focusedOnObject=1;
        if( pages&gt;0 &amp;&amp; currentPage &lt; (pages-1) ){
            audio_play_sound(bleep, 1, false);
            currentPage++;
            textIndex=0;
        }else if(pages==0 || currentPage==(pages - 1)){
        
             tempx = view_xview[0] + 32;
             tempy = view_yview[0] + view_hview[0] - 16;
             //tempx1 =window_mouse_get_x();
             //tempy1 = window_mouse_get_y();
             tempx1 = mouse_x;
             tempy1 = mouse_y;
    
             show_debug_message(tempx);
             show_debug_message(tempy);
             show_debug_message("\n");
             show_debug_message(tempx1);
             show_debug_message(tempy1);
             if (abs(tempx - tempx1) &lt; 16 &amp;&amp; abs(tempy - tempy1) &lt; 16) {
                 showText = 0;
                 currentPage = 0;
                 answerClicked=okayAnswer;
                 focusedOnObject=0;
             }
    
             tempx = view_xview[0] + 128;
             tempy = view_yview[0] + view_hview[0] - 16
    
             if (abs(tempx - tempx1) &lt; 16 &amp;&amp; abs(tempy - tempy1) &lt; 16) {
                 showText = 0;
                 currentPage = 0;
                 answerClicked="cancel";
                 focusedOnObject=0;
             }
         }
     }


 }
 
 if( noflines==0 ){
     strlen = string_length(text);
     j = 0;
     for( i = 1; i &lt;= strlen; i++){
        c =  string_char_at(text, i);
        n = ord(c);
        if(n==10 ){
            lines[j] = lines[j] + c;
            noflines++;
            j++;
        }else{
            lines[j] = lines[j] + c;
        }   
        
            //show_debug_message(c );
          //show_debug_message( ord(c) );
          
        
     }
     
     if( noflines!= 0 ){
        //show_debug_message( "n of lines ");
        //show_debug_message(noflines);
     }
     pages=floor(noflines/3);
     if( (noflines/3)&gt;pages){
        pages++;
     }
     
     
     if(pages){
     for(i=0;i&lt;noflines;i++){
     show_debug_message("line");
        show_debug_message(lines[i]);
        
     }
     
     show_debug_message("current page");
    show_debug_message(currentPage);
    show_debug_message(pages);
    show_debug_message(noflines);
    }
 } 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font1small);
textChars="";

if( showText==1 ){
focusedOnObject=1;
//find which page
textToDisplay = "";


for( i = currentPage*3; i &lt; (currentPage*3)+3;i++){
    if( lines[i]!=""){
        textToDisplay = textToDisplay+lines[i];
    }
} 


strlen = string_length(textToDisplay);

for(i=0;i&lt;strlen;i++){
        textChars[i]=string_char_at(textToDisplay, i);
}
    
str="";

for(i=1;i&lt;textIndex;i++){
    str+= textChars[i];                
}
if(textIndex&lt;strlen){
    textIndex++;
}


//experimental main black dialog screen like rpg
draw_set_alpha(1); 

 
draw_rectangle_color(
 view_xview[0] + 14 , view_yview[0]+ view_hview[0] + 2,
 view_xview[0] + view_wview[0] - 14 ,view_yview[0] + view_hview[0]*6/9 - 2, 
 c_white, c_white, c_white, c_white, false);
draw_rectangle_color(
 view_xview[0] + 16 , view_yview[0]+ view_hview[0] ,
 view_xview[0] + view_wview[0] - 16 ,view_yview[0] + view_hview[0]*6/9, 
 c_black, c_black, c_black, c_black, false);
 
 draw_text_transformed_colour(view_xview[0] + 32 ,view_yview[0] + view_hview[0]*6/9 ,str, 1, 1, 0, c_red, c_red, c_yellow, c_yellow, 1);

    if( pages==0 || currentPage == (pages - 1) ){
        if( okayAnswer==""){
            draw_text_transformed_colour(view_xview[0] + 32 ,view_yview[0] + view_hview[0] - 16 ,"OK", 1, 1, 0, c_red, c_red, c_blue, c_blue, 1);
        }else{
            draw_text_transformed_colour(view_xview[0] + 32 ,view_yview[0] + view_hview[0] - 16 ,okayAnswer, 1, 1, 0, c_red, c_red, c_blue, c_blue, 1);
        }
        if( cancelAnswer==""){
            draw_text_transformed_colour(view_xview[0] + 128 ,view_yview[0] + view_hview[0] - 16 ,"CANCEL", 1, 1, 0, c_red, c_red, c_blue, c_blue, 1);
        }else{
            draw_text_transformed_colour(view_xview[0] + 128 ,view_yview[0] + view_hview[0] - 16 ,cancelAnswer, 1, 1, 0, c_red, c_red, c_blue, c_blue, 1);
        }
    }
    
for( i = 0; i&lt;10; i++){    
draw_sprite_ext(shadowface, current_second/10  ,view_xview[0] + view_wview[0] - 64 + irandom(3),view_yview[0] + view_hview[0]*6/9 + 20+ irandom(3), 0.4, 0.4, image_angle+ irandom(3), c_white, irandom(3)/10);
}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar useflashlight;
useflashlight=0;

surf=surface_create(2640,2480);
surface_set_target(surf);
draw_clear(c_black);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(useflashlight==0)exit
if(useflashlight==2){
    useflashlight=1;exit
}

depth=1;
 draw_set_alpha(1);
surface_set_target(surf);

//col = make_colour_rgb(255,122,0);
draw_clear(c_black);

draw_set_blend_mode(bm_subtract);

pdir = point_direction(mainObject3.x,mainObject3.y,mouse_x,mouse_y)


for( i = 0; i &lt; 10; i++){
draw_sprite_ext(dflashlight,0,mainObject3.x,mainObject3.y,1,1+irandom(1)/10,pdir,c_white,irandom(3)/10);
}

//shadow caster works
dir[0] = mouse_x - mainObject3.x ;
dir[1] = mouse_y - mainObject3.y ;
dist = point_distance(dir[0], dir[1], 0, 0 );

if( dist != 0){
d[0] = dir[0]/dist;
d[1] = dir[1]/dist;
}

//flashlight position end
flpoint[0] = mainObject3.x + (d[0]*100);
flpoint[1] = mainObject3.y + (d[1]*100);

d3 = distance_to_point(flpoint[0], flpoint[1]);
draw_rectangle(flpoint[0],flpoint[1],flpoint[0]+16,flpoint[1]+16,true)

draw_set_blend_mode(bm_normal);

depth=4;
//now draw shadows
var i;

for (i = 0; i &lt; instance_number(collidable); i += 1){
    col = instance_find(collidable,i);    
/*    
    c[0] = col.x;
    c[1] = col.y;
    
    a[0] = mainObject3.x+16 + (d[0]*10);
    a[1] = mainObject3.y+16 + (d[1]*10);
    
    b[0] = flpoint[0];
    b[1] = flpoint[1];

    pointBetween( a, b, c)    
*/
    c[0] = col.x;
    c[1] = col.y;
    
    b[0] = col.x - mainObject3.x;
    b[1] = col.y - mainObject3.y;

    dot = dot_product( b[0], b[1], d[0], d[1])

    if( dot &gt; 0 ){
    
    pdir = point_direction(mainObject3.x,mainObject3.y,col.x,col.y)
    
    d3d_transform_set_rotation_z(pdir) //Angle in degrees
    d3d_transform_add_translation(col.x + 8,col.y + 8,0)
    draw_set_alpha(0.99);
    //draw_rectangle(0,0,128,16,true)
   // draw_rectangle_color( 0,-8,128,8,c_black, c_black, c_black, c_black, false);
      draw_set_color(c_black);
    draw_primitive_begin(pr_trianglefan);
    
    draw_vertex(0,-8);
    draw_vertex(256,-32);
    draw_vertex(267, 32);
    
    draw_vertex(0, 8);    
    draw_primitive_end();
    
    //draw_sprite_ext(shadowCollidableCast,0, 0, 0, 1, 1, 0, c_white, 1);
    d3d_transform_set_identity()
    //   draw_sprite_ext(shadowCollidableCast,0, col.x, col.y, 1, 1, pdir, c_white, 1);
    }
}

draw_set_alpha(darkness);  
surface_reset_target();

draw_set_blend_mode(bm_normal);

draw_surface( surf, 0, 0);

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
